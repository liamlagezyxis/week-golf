{
    "Header" : {
        "Variable declaration" : "Variable declaration",
        "Constant declaration" : "Constant declaration",
        "Function declaration" : "Function declaration",
        "Lambda declaration" : "Lambda declaration",
        "While loop" : "While loop",
        "For loop" : "For loop",
        "Foreach loop" : "Foreach loop",
        "Do .. while loop" : "Do .. while loop",
        "Foreach index and element loop" : "Foreach index and element loop",
        "Infinite loop" : "Infinite loop",
        "if ... else if ... else" : "if ... else if ... else",
        "Ternary operator" : "Ternary operator",
        "Try ... Catch" : "Try ... Catch",
        "Switch" : "Switch",
        "Type of the %" : "Type of the %",
        "Top level constructor" : "Top level constructor",
        "Get a line of STDIN" : "Get a line of STDIN",
        "Get all STDIN" : "Get all STDIN",
        "Get a char STDIN" : "Get a char STDIN",
        "Print without a new line at the end" : "Print without a new line at the end",
        "Print with a new line at the end" : "Print with a new line at the end",
        "Implicit conversion of bool to int" : "Implicit conversion of bool to int",
        "Implicit conversion of char to int" : "Implicit conversion of char to int",
        "Format a string" : "Format a string",
        "Template string" : "Template string",
        "Three-Way operator" : "Three-Way operator"
    },

    "APL" : {
        "Variable declaration" : "s←'a variable'",
        "Constant declaration" : false,
        "Function declaration" : "∇ return←a_function argument",
        "Lambda declaration" : "a_lambda←{⍵}",
        "While loop" : ":While b\n\t...\n:EndWhile\n\n{...}⍣{~b}⍣b",
        "For loop" : ":For i :In ⍳n\n\t...\n:EndFor\n\n{...}¨⍳n",
        "Foreach loop" : ":For i :In a_list\n\t...\n:EndFor\n\n{...}¨a_list",
        "Do .. while loop" : ":Repeat\n\t...\n:Until ~b\n\n{...}⍣{~b}",
        "Foreach index and element loop" : ":ForEach i elem :In (⍳≢a_list) a_list\n\t...\n:EndFor\n\na_list{...}¨⍳≢a_list",
        "Infinite loop" : ":Repeat\n\t...\n:EndRepeat\n\n{...}⍣{0}",
        "if ... else if ... else" : ":If b1\n\t...\n:ElseIf b2\n\t...\n:EndIf\n\n{\n\tb1:...\n\tb2:...\n\t...\n}",
        "Ternary operator" : "{\n\tb: _true\n\t_false\n}",
        "Try ... Catch" : ":Trap 0\n\t...\n:Else\n\t...\n:EndTrap\n\n{\n\t0::...\n\t...\n}",
        "Switch" : ":Select x\n:Case y\n\t...\n:Else\n\t...\n:EndSelect\n\n{\n\tx≡y:...\n\t...\n}",
        "Type of the %" : "Floored\nx%y in APL is y|x",
        "Top level constructor" : false,
        "Get a line of STDIN" : "⍞\n\n⎕",
        "Get all STDIN" : "{1005::r ⋄ ∇ r,←⊂⍞}r←0⍴⊂''",
        "Get a char STDIN" : false,
        "Print without a new line at the end" : "⍞←s",
        "Print with a new line at the end" : "⎕←s",
        "Implicit conversion of bool to int" : true,
        "Implicit conversion of char to int" : false,
        "Format a string" : "⍕n\n\n'format_string'⎕FMT n",
        "Template string" : false,
        "Three-Way operator" : "×⍤-"
    },

    "C" : {
        "Variable declaration" : "char *s = \"a variable\"",
        "Constant declaration" : "const char *s = \"a constant\"",
        "Function declaration" : "type a_function(type argument){\n\treturn argument;\n}",
        "Lambda declaration" : false,
        "While loop" : "while (b){...}",
        "For loop" : "for(int i = 0; i < n; i++){...}",
        "Foreach loop" : false,
        "Do .. while loop" : "do{\n\t...\n}while (b)",
        "Foreach index and element loop" : false,
        "Infinite loop" : "for(;;){...}",
        "if ... else if ... else" : "if(b1){\n\t...\n} else if (b2) {\n\t...\n} else {\n\t...\n}",
        "Ternary operator" : "b ? _true : _false",
        "Try ... Catch" : false,
        "Switch" : "switch (x){\n\tcase y:\n\t\t...\n\t\tbreak;\n\tdefault:\n\t\t...\n\t\tbreak;\n}",
        "Type of the %" : "Truncated",
        "Top level constructor" : "main(){}",
        "Get a line of STDIN" : "scanf(\"%s\",&s)",
        "Get all STDIN" : false,
        "Get a char STDIN" : "getchar()",
        "Print without a new line at the end" : "printf(\"%s\",s)",
        "Print with a new line at the end" : "printf(\"%s\n\",s)",
        "Implicit conversion of bool to int" : true,
        "Implicit conversion of char to int" : true,
        "Format a string" : "sprintf(\"%s\",s)",
        "Template string" : false,
        "Three-Way operator" : false
    },

    "C++" : {
        "Variable declaration" : "auto s = \"a variable\"",
        "Constant declaration" : "const auto s = \"a constant\"",
        "Function declaration" : "type a_function(type argument){\n\treturn argument;\n}",
        "Lambda declaration" : false,
        "While loop" : "while (b){...}",
        "For loop" : "for(int i = 0; i < n; i++){...}",
        "Foreach loop" : "for(auto c:s){...}",
        "Do .. while loop" : "do{\n\t...\n}while (b)",
        "Foreach index and element loop" : false,
        "Infinite loop" : "for(;;){...}",
        "if ... else if ... else" : "if(b1){\n\t...\n} else if (b2) {\n\t...\n} else {\n\t...\n}",
        "Ternary operator" : "b ? _true : _false",
        "Try ... Catch" : false,
        "Switch" : "switch (x){\n\tcase y:\n\t\t...\n\t\tbreak;\n\tdefault:\n\t\t...\n\t\tbreak;\n}",
        "Type of the %" : "Truncated",
        "Top level constructor" : "int main(){}",
        "Get a line of STDIN" : "scanf(\"%s\",&s)\n\nstd::cin >> s;",
        "Get all STDIN" : false,
        "Get a char STDIN" : "getchar()",
        "Print without a new line at the end" : "printf(\"%s\",s)\n\nstd::cout << s;",
        "Print with a new line at the end" : "printf(\"%s\\n\",s)\n\nstd::cout << s << \"\\n\";",
        "Implicit conversion of bool to int" : true,
        "Implicit conversion of char to int" : true,
        "Format a string" : "sprintf(\"%s\",s)",
        "Template string" : false,
        "Three-Way operator" : "<=>"
    },

    "C#" : {
        "Variable declaration" : "string s = \"a variable\"",
        "Constant declaration" : "const string s = \"a constant\"",
        "Function declaration" : "type AFunction(type argument) {\n\treturn argument;\n}",
        "Lambda declaration" : "arg => arg",
        "While loop" : "while (b) {...}",
        "For loop" : "for (int i = 0; i < n; i++) {...}",
        "Foreach loop" : "foreach (var c in s) {...}",
        "Do .. while loop" : "do {\n\t...\n} while (b)",
        "Foreach index and element loop" : false,
        "Infinite loop" : "for (;;) {...}",
        "if ... else if ... else" : "if (b1) {\n\t...\n} else if (b2) {\n\t...\n} else {\n\t...\n}",
        "Ternary operator" : "b ? _true : _false",
        "Try ... Catch" : "try {\n\t...\n} catch (Exception e) {\n\t...\n}",
        "Switch" : "switch (x) {\n\tcase y:\n\t\t...\n\t\tbreak;\n\tdefault:\n\t\t...\n\t\tbreak;\n}",
        "Type of the %" : "Truncated",
        "Top level constructor" : "class P {static void Main() {...}}\n\nHowever, it's not needed as top-level statements are supported.",
        "Get a line of STDIN" : "Console.ReadLine()",
        "Get all STDIN" : "Console.In.ReadToEnd()",
        "Get a char STDIN" : "Console.Read()",
        "Print without a new line at the end" : "Console.Write(s)",
        "Print with a new line at the end" : "Console.WriteLine(s)",
        "Implicit conversion of bool to int" : false,
        "Implicit conversion of char to int" : true,
        "Format a string" : "String.Format(\"{0}\", s)",
        "Template string" : "$\"{var1}, {var2}\"",
        "Three-Way operator" : false
    },

    "Clojure" : {
        "Variable declaration" : "(def s \"a variable\")",
        "Constant declaration" : "(def ^:const s \"a constant\")",
        "Function declaration" : "(defn f [arg] arg)",
        "Lambda declaration" : "(fn [arg] arg)\n\n#(...) ; Lambda where % is 1st arg, %2 is 2nd, etc.",
        "While loop" : "(while b (...))",
        "For loop" : "(dotimes [i n] (...))",
        "Foreach loop" : "(doseq [c s] (...))",
        "Do .. while loop" : "(loop []\n\t(...)\n\t(when b\n\t\t(recur)))",
        "Foreach index and element loop" : false,
        "Infinite loop" : "(while true (...))",
        "if ... else if ... else" : "(if b1\n\t(...)\n\t(if b2\n\t\t(...)\n\t\t(...)))\n\n(cond\n\tb1 (...)\n\tb2 (...)\n\t:else (...))",
        "Ternary operator" : false,
        "Try ... Catch" : "(try\n\t(...)\n\t(catch Exception e\n\t\t(...)))",
        "Switch" : "(case x\n\ty (...)\n\t(default))",
        "Type of the %" : "(mod a b) - Floored\n(rem a b) - Truncated",
        "Top level constructor" : false,
        "Get a line of STDIN" : "(read-line)",
        "Get all STDIN" : "(slurp *in*)",
        "Get a char STDIN" : false,
        "Print without a new line at the end" : "(print s)",
        "Print with a new line at the end" : "(println s)",
        "Implicit conversion of bool to int" : false,
        "Implicit conversion of char to int" : false,
        "Format a string" : "(format \"%s\" s)",
        "Template string" : false,
        "Three-Way operator" : "(compare a b)"
    },

    "Go": {
        "Variable declaration" : "s := \"a variable\"",
        "Constant declaration" : "const s = \"a constant\"",
        "Function declaration" : "func aFunction(argument type) {\n\treturn argument\n}",
        "Lambda declaration" : "func(argument type) {\n\treturn argument\n}",
        "While loop" : "for b {...}",
        "For loop" : "for i := 0; i < n; i++ {...}",
        "Foreach loop" : "for _, c := range s {...}",
        "Do .. while loop" : false,
        "Foreach index and element loop" : "for idx, c := range s {...}",
        "Infinite loop" : "for {...}",
        "if ... else if ... else" : "if b1 {\n\t...\n} else if b2 {\n\t...\n} else {\n\t...\n}",
        "Ternary operator" : false,
        "Try ... Catch" : false,
        "Switch" : "switch x {\ncase y:\n\t...\ndefault:\n\t...\n}",
        "Type of the %" : "Truncated",
        "Top level constructor" : "func main() {}",
        "Get a line of STDIN" : "import \"fmt\"\nvar s string\nfmt.Scan(&s)",
        "Get all STDIN" : "import \"os\"\nimport \"io\"\nio.ReadAll(os.Stdin)",
        "Get a char STDIN" : false,
        "Print without a new line at the end" : "import \"fmt\"\nfmt.Print(s)",
        "Print with a new line at the end" : "import \"fmt\"\nfmt.Println(s)",
        "Implicit conversion of bool to int" : false,
        "Implicit conversion of char to int" : false,
        "Format a string" : "import \"fmt\"\nSprintf(\"%s\", s)",
        "Template string" : false,
        "Three-Way operator" : false
    },

    "Java" : {
        "Variable declaration" : "String s = \"a variable\"",
        "Constant declaration" : "final String s = \"a constant\"",
        "Function declaration" : "type aFunction(type argument) {\n\treturn argument;\n}",
        "Lambda declaration" : "arg -> arg",
        "While loop" : "while (b) {...}",
        "For loop" : "for (int i = 0; i < n; i++) {...}",
        "Foreach loop" : "for (var c : s) {...}",
        "Do .. while loop" : "do {\n\t...\n} while (b)",
        "Foreach index and element loop" : false,
        "Infinite loop" : "for (;;) {...}",
        "if ... else if ... else" : "if (b1) {\n\t...\n} else if (b2) {\n\t...\n} else {\n\t...\n}",
        "Ternary operator" : "b ? _true : _false",
        "Try ... Catch" : "try {\n\t...\n} catch (Exception e) {\n\t...\n}",
        "Switch" : "switch (x) {\n\tcase y:\n\t\t...\n\t\tbreak;\n\tdefault:\n\t\t...\n\t\tbreak;\n}",
        "Type of the %" : "Truncated",
        "Top level constructor" : "interface prog {static void main(String[] args) {...}}",
        "Get a line of STDIN" : "new java.util.Scanner(System.in).nextLine()",
        "Get all STDIN" : false,
        "Get a char STDIN" : "System.in.read()",
        "Print without a new line at the end" : "System.out.print(s)",
        "Print with a new line at the end" : "System.out.println(s)",
        "Implicit conversion of bool to int" : false,
        "Implicit conversion of char to int" : true,
        "Format a string" : "String.format(\"%s\", s)",
        "Template string" : false,
        "Three-Way operator" : "a.compareTo(b)"
    },

    "JavaScript" : {
        "Variable declaration" : "let s = \"a variable\"\n\nvar s = \"a variable\"\n\ns = \"a variable\"",
        "Constant declaration" : "const s = \"a constant\"",
        "Function declaration" : "function a_function(argument){\n\treturn argument\n}",
        "Lambda declaration" : "a_lambda = argument => argument",
        "While loop" : "while (b){...}",
        "For loop" : "for(let i = 0; i < n; i++){...}",
        "Foreach loop" : "for (const elem of a_list){...}",
        "Do .. while loop" : "do{\n\t...\n}while (b)",
        "Foreach index and element loop" : false,
        "Infinite loop" : "for(;;){...}",
        "if ... else if ... else" : "if(b1){\n\t...\n} else if (b2) {\n\t...\n} else {\n\t...\n}",
        "Ternary operator" : "b ? _true : _false",
        "Try ... Catch" : "try {\n\t...\n} catch (e) {\n\t...\n}",
        "Switch" : "switch (x){\n\tcase y:\n\t\t...\n\t\tbreak;\n\tdefault:\n\t\t...\n\t\tbreak;\n}",
        "Type of the %" : "Truncated",
        "Top level constructor" : false,
        "Get a line of STDIN" : "prompt()",
        "Get all STDIN" : false,
        "Get a char STDIN" : false,
        "Print without a new line at the end" : "process.stdout.write(s)",
        "Print with a new line at the end" : "console.log(s)",
        "Implicit conversion of bool to int" : true,
        "Implicit conversion of char to int" : false,
        "Format a string" : false,
        "Template string" : "`${var1}, ${var2}`",
        "Three-Way operator" : false
    },

    "Julia" : {
        "Variable declaration" : "s = \"a variable\"",
        "Constant declaration" : "const s = \"a constant\"",
        "Function declaration" : "function a_function(argument)\n\targument\nend",
        "Lambda declaration" : "a_lambda = argument -> argument",
        "While loop" : "while b\n\t...\nend",
        "For loop" : "for i = 0:n-1\n\t...\nend",
        "Foreach loop" : "for elem in a_list\n\t...\nend",
        "Do .. while loop" : false,
        "Foreach index and element loop" : "for (i, elem) in enumerate(a_list)\n\t...\nend",
        "Infinite loop" : "while true\n\t...\nend",
        "if ... else if ... else" : "if b1\n\t...\nelseif b2\n\t...\nelse\n\t...\nend",
        "Ternary operator" : "b ? _true : _false",
        "Try ... Catch" : "try\n\t...\ncatch e\n\t...\nend",
        "Switch" : false,
        "Type of the %" : "Truncated",
        "Top level constructor" : false,
        "Get a line of STDIN" : "readline()",
        "Get all STDIN" : "readlines()",
        "Get a char STDIN" : "read(stdin, Char)",
        "Print without a new line at the end" : "print(s)",
        "Print with a new line at the end" : "println(s)",
        "Implicit conversion of bool to int" : true,
        "Implicit conversion of char to int" : false,
        "Format a string" : "@sprintf \"%d\" n",
        "Template string" : "\"$var1, $var2\"",
        "Three-Way operator" : false
    },

    "Kotlin" : {
        "Variable declaration" : "var s = \"a variable\"",
        "Constant declaration" : "val s = \"a constant\"",
        "Function declaration" : "fun <T> a_function(argument: T): T = argument",
        "Lambda declaration" : "a_lambda = {argument -> argument}",
        "While loop" : "while (b) {\n\t...\n}",
        "For loop" : "for (i in 0 til n) {\n\t...\n}",
        "Foreach loop" : "for (elem in a_list) {\n\t...\n}",
        "Do .. while loop" : "do {\n\t...\n} while (b)",
        "Foreach index and element loop" : "for ((i, elem) in a_list.withIndex()) {\n\t...\n}",
        "Infinite loop" : "while (true) {\n\t...\n}",
        "if ... else if ... else" : "if (b1) {\n\t...\n}\nelse if (b2) {\n\t...\n}\nelse {\n\t...\n}",
        "Ternary operator" : "if (b) _true else _false",
        "Try ... Catch" : "try {\n\t...\n} catch (e: Exception) {\n\t...\n}",
        "Switch" : "when (x) {\n\ty -> ...\nelse -> ...\n}",
        "Type of the %" : "Truncated",
        "Top level constructor" : "fun main() {\n\t...\n}",
        "Get a line of STDIN" : "readln()",
        "Get all STDIN" : "generateSequence(::readLine)",
        "Get a char STDIN" : "System.`in`.read()",
        "Print without a new line at the end" : "print(s)",
        "Print with a new line at the end" : "println(s)",
        "Implicit conversion of bool to int" : false,
        "Implicit conversion of char to int" : false,
        "Format a string" : "\"%d\".format(n)",
        "Template string" : "\"$var1, $var2\"",
        "Three-Way operator" : "a.compareTo(b)"
    },

    "Lua" : {
        "Variable declaration" : "local s = \"a variable\"",
        "Constant declaration" : "local s &lt;const&gt; = \"a constant\"",
        "Function declaration" : "function aFunction (argument)\n\treturn argument\nend",
        "Lambda declaration" : "aLambda = function(argument)\n\treturn argument\nend",
        "While loop" : "while b do\n\t...\nend",
        "For loop" : "for i = 0, n-1 do\n\t...\nend",
        "Foreach loop" : "for _, elem in ipairs(aList)\n\t...\nend",
        "Do .. while loop" : "repeat\n\t...\nuntil not b",
        "Foreach index and element loop" : "for idx, elem in ipairs(aList)\n\t...\nend",
        "Infinite loop" : "while true\n\t...\nend",
        "if ... else if ... else" : "if b1 then\n\t...\nelseif b2 then\n\t...\nelse\n\t...\nend",
        "Ternary operator" : false,
        "Try ... Catch" : false,
        "Switch" : false,
        "Type of the %" : "Floored",
        "Top level constructor" : false,
        "Get a line of STDIN" : "io.read()",
        "Get all STDIN" : "io.read(\"*a\")",
        "Get a char STDIN" : "io.read(1)",
        "Print without a new line at the end" : "io.write(s)",
        "Print with a new line at the end" : "print(s)",
        "Implicit conversion of bool to int" : false,
        "Implicit conversion of char to int" : false,
        "Format a string" : "string.format(\"%d\", n)",
        "Template string" : false,
        "Three-Way operator" : false
    },
    
    "OCaml" : {
        "Variable declaration" : "let s = ref \"a variable\"",
        "Constant declaration" : "let s = \"a constant\"",
        "Function declaration" : "let a_function argument = argument",
        "Lambda declaration" : "let a_lambda = fun argument -> argument",
        "While loop" : "while b do\n\t...\ndone",
        "For loop" : "for i = 0 to n - 1 do\n\t...\ndone",
        "Foreach loop" : "List.iter (fun elem -> ...) a_list.",
        "Do .. while loop" : false,
        "Foreach index and element loop" : "List.iteri (fun i elem -> ...) a_list",
        "Infinite loop" : "while true do\n\t...\ndone",
        "if ... else if ... else" : "if b1 then\n\t...\nelse if b2 then\n\t...\nelse\n\t...",
        "Ternary operator" : "if b then _true else _false",
        "Try ... Catch" : "try\n\t...\nwith e ->\n\t...",
        "Switch" : "match x with | y -> ... | _ -> ...",
        "Type of the %" : "Truncated",
        "Top level constructor" : false,
        "Get a line of STDIN" : "read_line()",
        "Get all STDIN" : "really_input_string stdin (in_channel_length stdin)",
        "Get a char STDIN" : "input_char stdin",
        "Print without a new line at the end" : "print_string s",
        "Print with a new line at the end" : "print_endline s",
        "Implicit conversion of bool to int" : false,
        "Implicit conversion of char to int" : false,
        "Format a string" : "Printf.sprintf \"%d\" n",
        "Template string" : false,
        "Three-Way operator" : "compare a b"
    },

    "Perl" : {
        "Variable declaration" : "$scalar = \"a variable\";\n@list = (1, 2, 3);\n%hash = (\"key\" => \"val\", 1 => 2);",
        "Constant declaration" : "use constant PI => 4 * atan2(1, 1);\nuse constant {one => 1, two => 2};",
        "Function declaration" : "sub a_function {\n\tmy ($arg_1, $arg_2) = @_;\n\treturn $arg_1 + $arg_2\n}\na_function 6, 9;",
        "Lambda declaration" : "$a_lambda = sub {\n\t$arg_1 = shift;\n\t$arg_2 = pop;\n\treturn $arg_1 + $arg_2;\n};\n$a_lambda->(6, 9);",
        "While loop" : "while ($b) {...}\n... while $b\n... until $b",
        "For loop" : "for ($i = 0; $i < $n; $i++) {...}\nfor $i (0..$n-1) {...}\n... for 0..$n-1;",
        "Foreach loop" : "for $e (@arr) {...}\n... for @arr;",
        "Do .. while loop" : "do {\n\t...\n} while $b;",
        "Foreach index and element loop" : "for $i (@arr) {$e = $arr[$i]; ...}\n$e = $arr[$_], ... for keys @arr;",
        "Infinite loop" : "{...; redo}\n... while 1",
        "if ... else if ... else" : "if ($b1) {\n\t...\n} elsif ($b2) {\n\t...\n} else {\n\t...\n}",
        "Ternary operator" : "$b ? $true : $false",
        "Try ... Catch" : "eval {... ; 1} or ...;\neval \"...\"; $@ and ...;",
        "Switch" : "use Switch;\nswitch($x) {\n\tcase $y {...}\n\telse {...}\n}",
        "Type of the %" : "Floored",
        "Top level constructor" : false,
        "Get a line of STDIN" : "~~<>;\n$x = <>;",
        "Get all STDIN" : "`dd`\njoin \"\", <>;\n@A = <>;",
        "Get a char STDIN" : "getc",
        "Print without a new line at the end" : "print $s",
        "Print with a new line at the end" : "$\\ = $/; print $s\n\n#!perl -l\nprint $s",
        "Implicit conversion of bool to int" : true,
        "Implicit conversion of char to int" : false,
        "Format a string" : "sprintf(\"%s\", $s)",
        "Template string" : "\"$var ${var} @{[$expr]} ${\\d$expr}\"",
        "Three-Way operator" : "<=>\ncmp"
      },

    "PHP" : {
        "Variable declaration" : "$s = \"a variable\"",
        "Constant declaration" : "define(\"S\", \"a constant\")",
        "Function declaration" : "function a_function($argument) {\n\treturn $argument;\n}",
        "Lambda declaration" : "$a_lambda = function ($argument) {\n\treturn $argument;\n}",
        "While loop" : "while ($b) {...}",
        "For loop" : "for ($i = 0; $i < $n; $i++) {...}",
        "Foreach loop" : "foreach ($arr as $e) {...}",
        "Do .. while loop" : "do {\n\t...\n} while ($b)",
        "Foreach index and element loop" : "foreach ($arr as $idx => $e) {...}",
        "Infinite loop" : "for (;;) {...}",
        "if ... else if ... else" : "if ($b1) {\n\t...\n} elseif ($b2) {\n\t...\n} else {\n\t...\n}",
        "Ternary operator" : "$b ? $true : $false",
        "Try ... Catch" : "try {\n\t...\n} catch (Exception $e) {\n\t...\n}",
        "Switch" : "switch ($x) {\n\tcase $y:\n\t\t...\n\t\tbreak;\n\tdefault:\n\t\t...\n\t\tbreak;\n}",
        "Type of the %" : "Truncated",
        "Top level constructor" : "&lt;? else it's HTML",
        "Get a line of STDIN" : "fgets(STDIN)",
        "Get all STDIN" : "`dd`",
        "Get a char STDIN" : "fgetc(STDIN)",
        "Print without a new line at the end" : "echo $s\n?&gt;&lt;?= $s (if it's at the end)",
        "Print with a new line at the end" : "echo \"$s\\n\"\n?&gt;&lt;?= \"$s\\n\" (if it's at the end)",
        "Implicit conversion of bool to int" : true,
        "Implicit conversion of char to int" : false,
        "Format a string" : "sprintf(\"%s\", $s)",
        "Template string" : "\"$var {$expr}\"",
        "Three-Way operator" : "<=>"
    },

    "Python" : {
        "Variable declaration" : "s = \"a variable\"",
        "Constant declaration" : false,
        "Function declaration" : "def a_function(argument):\n\treturn argument",
        "Lambda declaration" : "a_lambda = lambda argument: argument",
        "While loop" : "while b:\n\t...",
        "For loop" : "for i in range(n):\n\t...",
        "Foreach loop" : "for i in a_list:\n\t...",
        "Do .. while loop" : false,
        "Foreach index and element loop" : "for i,elem in enumerate(a_list):\n\t...",
        "Infinite loop" : "while 1:\n\t...",
        "if ... else if ... else" : "if b1:\n\t...\nelif b2:\n\t...\nelse:\n\t...",
        "Ternary operator" : "_true if b else _false\n\n[_false, _true][b]",
        "Try ... Catch" : "try:\n\t...\nexcept:\n\t...",
        "Switch" : "match x:\n\tcase y:\n\t\t...\n\tcase _:\n\t\t...",
        "Type of the %" : "Floored",
        "Top level constructor" : false,
        "Get a line of STDIN" : "input()",
        "Get all STDIN" : "open(0).read()",
        "Get a char STDIN" : "import sys\nsys.stdin.read(1)",
        "Print without a new line at the end" : "print(s, end='')",
        "Print with a new line at the end" : "print(s)",
        "Implicit conversion of bool to int" : true,
        "Implicit conversion of char to int" : false,
        "Format a string" : "'%i'%n",
        "Template string" : "f'{var1}, {var2}'",
        "Three-Way operator" : false
    },

    "Raku" : {
        "Variable declaration" : "my $s = \"a variable\"",
        "Constant declaration" : "constant $s = \"a constant\"",
        "Function declaration" : "sub a_function($argument) {\n\treturn $argument;\n}",
        "Lambda declaration" : "my $a_lambda = -> $argument {$argument};",
        "While loop" : "while $b {\n\t...\n}",
        "For loop" : "for 0..$n-1 -> $i {\n\t...\n}",
        "Foreach loop" : "for @a_list -> $elem {\n\tsay $elem;\n}",
        "Do .. while loop" : false,
        "Foreach index and element loop" : "for @a_list.kv -> $idx, $elem {\n\tsay $elem;\n}",
        "Infinite loop" : "loop{...}",
        "if ... else if ... else" : "if $b1 {\n\t...\n} elsif $b2 {\n\t...\n} else {\n\t...\n}",
        "Ternary operator" : "$b ?? $true !! $false",
        "Try ... Catch" : "",
        "Switch" : "given $x {\n\twhen $y { ... }\n\tdefault { ... }\n}",
        "Type of the %" : "Floored",
        "Top level constructor" : false,
        "Get a line of STDIN" : "get",
        "Get all STDIN" : "slurp",
        "Get a char STDIN" : "getc",
        "Print without a new line at the end" : "print $s",
        "Print with a new line at the end" : "say s\nput s",
        "Implicit conversion of bool to int" : true,
        "Implicit conversion of char to int" : false,
        "Format a string" : "sprintf(\"%s\", $s)",
        "Template string" : "\"$var1, $var2\"",
        "Three-Way operator" : "<=>"
    },

    "Ruby" : {
        "Variable declaration" : "s = \"a variable\"",
        "Constant declaration" : "S = \"a constant\"",
        "Function declaration" : "def a_function(argument)\n\targument\nend",
        "Lambda declaration" : "a_lambda = -> argument{argument}",
        "While loop" : "while b do\n\t...\nend",
        "For loop" : "for i in 0...n\n\n(0...n).each { |i| ...}",
        "Foreach loop" : "for i in a_list\n\na_list.each {|elem| ...}",
        "Do .. while loop" : "begin\n\t...\nend while b",
        "Foreach index and element loop" : "a_list.each_with_index {|elem, idx| ...}",
        "Infinite loop" : "loop{...}",
        "if ... else if ... else" : "if b1\n\t...\nelsif b2\n\t...\nelse\n\t...\nend",
        "Ternary operator" : "b ? _true : _false",
        "Try ... Catch" : "begin\n\t...\nrescue\n\t...\nend",
        "Switch" : "case x\n\twhen y\n\t\t...\n\telse\n\t\t...\nend",
        "Type of the %" : "Floored",
        "Top level constructor" : false,
        "Get a line of STDIN" : "gets",
        "Get all STDIN" : "$<",
        "Get a char STDIN" : "$<.getc",
        "Print without a new line at the end" : "print s\n$><&lt;s",
        "Print with a new line at the end" : "puts s\np s",
        "Implicit conversion of bool to int" : false,
        "Implicit conversion of char to int" : false,
        "Format a string" : "'%i'%n",
        "Template string" : "\"#{var1}, #{var2}\"",
        "Three-Way operator" : "<=>"
    },
    

    "Sass" : {
        "Variable declaration" : "$s: \"a variable\"",
        "Constant declaration" : false,
        "Function declaration" : "@function a_function($argument){\n\t@return argument;\n}",
        "Lambda declaration" : false,
        "While loop" : "@while $b {\n\t...\n}",
        "For loop" : "@for $i from 0 to n {\n\t...\n}",
        "Foreach loop" : "@each $e in a_list {\n\t...\n}",
        "Do .. while loop" : false,
        "Foreach index and element loop" : false,
        "Infinite loop" : "@while 1{...}",
        "if ... else if ... else" : "@if $b1 {\n\t...\n} @else if $b2 {\n\t...\n } @else {\n\t...\n}",
        "Ternary operator" : "if($b, $true, $false)",
        "Try ... Catch" : false,
        "Switch" : false,
        "Type of the %" : "",
        "Top level constructor" : false,
        "Get a line of STDIN" : "get();",
        "Get all STDIN" : "see();",
        "Get a char STDIN" : "getc();",
        "Print without a new line at the end" : false,
        "Print with a new line at the end" : "@debug",
        "Implicit conversion of bool to int" : false,
        "Implicit conversion of char to int" : false,
        "Format a string" : false,
        "Template string" : "\"#{$var1}, #{$var2}\"",
        "Three-Way operator" : false
    },
    
    "Vyxal" : {
        "Variable declaration" : "`a variable` →s",
        "Constant declaration" : false,
        "Function declaration" : "@a_function:argument|←argument;\n@a_function:1|;",
        "Lambda declaration" : "λcode; →a_lambda",
        "While loop" : "{b|...}",
        "For loop" : "←n(...)\n←n(i|...)",
        "Foreach loop" : "←a_list(...)|←a_list(elem|...)",
        "Do .. while loop" : false,
        "Foreach index and element loop" : "←a_list ė(n÷)\n←a_list ¨2...;",
        "Infinite loop" : "{...}",
        "if ... else if ... else" : "←b1 [...|←b2[...|...]]",
        "Ternary operator" : "\"i\n¨i<truthyElement><falseyElement>",
        "Try ... Catch" : false,
        "Switch" : false,
        "Type of the %" : "Floored",
        "Top level constructor" : false,
        "Get a line of STDIN" : "?",
        "Get all STDIN" : "□",
        "Get a char STDIN" : false,
        "Print without a new line at the end" : "₴",
        "Print with a new line at the end" : ",",
        "Implicit conversion of bool to int" : true,
        "Implicit conversion of char to int" : false,
        "Format a string" : "`%`%",
        "Template string" : "←var1 ←var2 `Π, Π`",
        "Three-Way operator" : "-±"
    }
}
