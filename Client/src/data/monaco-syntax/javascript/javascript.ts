/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
// import { conf as tsConf, language as tsLanguage } from '../typescript/typescript';
export var conf = {
    wordPattern: /(-?\d*\.\d\w*)|([^\`\~\!\@\#\%\^\&\*\(\)\-\=\+\[\{\]\}\\\|\;\:\'\"\,\.\<\>\/\?\s]+)/g,
    comments: {
      lineComment: "//",
      blockComment: ["/*", "*/"]
    },
    brackets: [
      ["{", "}"],
      ["[", "]"],
      ["(", ")"]
    ],
    autoClosingPairs: [
      { open: "{", close: "}" },
      { open: "[", close: "]" },
      { open: "(", close: ")" },
      { open: '"', close: '"', notIn: ["string"] },
      { open: "'", close: "'", notIn: ["string", "comment"] },
      { open: "`", close: "`", notIn: ["string", "comment"] },
      { open: "/**", close: " */", notIn: ["string"] }
    ],
    folding: {
      markers: {
        start: new RegExp("^\\s*//\\s*#?region\\b"),
        end: new RegExp("^\\s*//\\s*#?endregion\\b")
      }
    }
};


export var language = {
    // Set defaultToken to invalid to see what you do not tokenize yet
    defaultToken: 'invalid',
    tokenPostfix: '.js',
    keywords: [
        'break',
        'case',
        'catch',
        'class',
        'continue',
        'const',
        'constructor',
        'debugger',
        'default',
        'delete',
        'do',
        'else',
        'export',
        'extends',
        'false',
        'finally',
        'for',
        'from',
        'function',
        'get',
        'if',
        'import',
        'in',
        'instanceof',
        'let',
        'new',
        'null',
        'return',
        'set',
        'super',
        'switch',
        'symbol',
        'this',
        'throw',
        'true',
        'try',
        'typeof',
        'undefined',
        'var',
        'void',
        'while',
        'with',
        'yield',
        'async',
        'await',
        'of'
    ],

    
    typeKeywords: [],
    operators: [
        "<=",
        ">=",
        "==",
        "!=",
        "===",
        "!==",
        "=>",
        "+",
        "-",
        "**",
        "*",
        "/",
        "%",
        "++",
        "--",
        "<<",
        "</",
        ">>",
        ">>>",
        "&",
        "|",
        "^",
        "!",
        "~",
        "&&",
        "||",
        "??",
        "?",
        ":",
        "=",
        "+=",
        "-=",
        "*=",
        "**=",
        "/=",
        "%=",
        "<<=",
        ">>=",
        ">>>=",
        "&=",
        "|=",
        "^=",
        "@"
      ],
      functions: [
        "constructor",
        "__defineGetter__",
        "__defineSetter__",
        "__lookupGetter__",
        "__lookupSetter__",
        "isPrototypeOf",
        "propertyIsEnumerable",
        "toString",
        "valueOf",
        "__proto__",
        "toLocaleString",
        "length",
        "constructor",
        "at",
        "concat",
        "copyWithin",
        "fill",
        "find",
        "findIndex",
        "findLast",
        "findLastIndex",
        "lastIndexOf",
        "pop",
        "push",
        "reverse",
        "shift",
        "unshift",
        "slice",
        "sort",
        "splice",
        "includes",
        "indexOf",
        "join",
        "keys",
        "entries",
        "values",
        "forEach",
        "filter",
        "flat",
        "flatMap",
        "map",
        "every",
        "some",
        "reduce",
        "reduceRight",
        "toLocaleString",
        "toString",
        "toReversed",
        "toSorted",
        "toSpliced",
        "with",
        "length",
        "constructor",
        "anchor",
        "at",
        "big",
        "blink",
        "bold",
        "charAt",
        "charCodeAt",
        "codePointAt",
        "concat",
        "endsWith",
        "fontcolor",
        "fontsize",
        "fixed",
        "includes",
        "indexOf",
        "italics",
        "lastIndexOf",
        "link",
        "localeCompare",
        "match",
        "matchAll",
        "normalize",
        "padEnd",
        "padStart",
        "repeat",
        "replace",
        "replaceAll",
        "search",
        "slice",
        "small",
        "split",
        "strike",
        "sub",
        "substr",
        "substring",
        "sup",
        "startsWith",
        "toString",
        "trim",
        "trimStart",
        "trimLeft",
        "trimEnd",
        "trimRight",
        "toLocaleLowerCase",
        "toLocaleUpperCase",
        "toLowerCase",
        "toUpperCase",
        "valueOf",
        "isWellFormed",
        "toWellFormed",
        "abs",
        "acos",
        "acosh",
        "asin",
        "asinh",
        "atan",
        "atanh",
        "atan2",
        "ceil",
        "cbrt",
        "expm1",
        "clz32",
        "cos",
        "cosh",
        "exp",
        "floor",
        "fround",
        "hypot",
        "imul",
        "log",
        "log1p",
        "log2",
        "log10",
        "max",
        "min",
        "pow",
        "random",
        "round",
        "sign",
        "sin",
        "sinh",
        "sqrt",
        "tan",
        "tanh",
        "trunc",
        "E",
        "LN10",
        "LN2",
        "LOG10E",
        "LOG2E",
        "PI",
        "SQRT1_2",
        "SQRT2",
        "constructor",
        "toString",
        "toDateString",
        "toTimeString",
        "toISOString",
        "toUTCString",
        "toGMTString",
        "getDate",
        "setDate",
        "getDay",
        "getFullYear",
        "setFullYear",
        "getHours",
        "setHours",
        "getMilliseconds",
        "setMilliseconds",
        "getMinutes",
        "setMinutes",
        "getMonth",
        "setMonth",
        "getSeconds",
        "setSeconds",
        "getTime",
        "setTime",
        "getTimezoneOffset",
        "getUTCDate",
        "setUTCDate",
        "getUTCDay",
        "getUTCFullYear",
        "setUTCFullYear",
        "getUTCHours",
        "setUTCHours",
        "getUTCMilliseconds",
        "setUTCMilliseconds",
        "getUTCMinutes",
        "setUTCMinutes",
        "getUTCMonth",
        "setUTCMonth",
        "getUTCSeconds",
        "setUTCSeconds",
        "valueOf",
        "getYear",
        "setYear",
        "toJSON",
        "toLocaleString",
        "toLocaleDateString",
        "toLocaleTimeString",
        "constructor",
        "toExponential",
        "toFixed",
        "toPrecision",
        "toString",
        "valueOf",
        "toLocaleString",
        "constructor",
        "exec",
        "dotAll",
        "flags",
        "global",
        "hasIndices",
        "ignoreCase",
        "multiline",
        "source",
        "sticky",
        "unicode",
        "compile",
        "toString",
        "test",
        "unicodeSets",
        "debug",
        "error",
        "info",
        "log",
        "warn",
        "dir",
        "dirxml",
        "table",
        "trace",
        "group",
        "groupCollapsed",
        "groupEnd",
        "clear",
        "count",
        "countReset",
        "assert",
        "profile",
        "profileEnd",
        "time",
        "timeLog",
        "timeEnd",
        "timeStamp",
        "context",
        "createTask",
        "memory",
        "prompt",
        'fetch',
        'crypto',
        'parseFloat',
        'parseInt',
        'Infinity',
        'NaN',
        'undefined',
        'decodeURI',
        'decodeURIComponent',
        'encodeURI',
        'encodeURIComponent',
        'escape',
        'unescape',
        'eval',
        'isFinite',
        'isNaN',
        'process',
        'global',
        'Buffer',
        'queueMicrotask',
        'clearImmediate',
        'setImmediate',
        'structuredClone',
        'clearInterval',
        'clearTimeout',
        'setInterval',
        'setTimeout',
        'atob',
        'btoa',
        'performance',
      ],
      objects: [
        "Object",
        "Array",
        "String",
        "Math",
        "Number",
        "Date",
        "RegExp",
        "console",
      ],
      symbols: /[=><!~?:&|+\-*\/\^%]+/,
      escapes: /\\(?:[abfnrtv\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,
      digits: /\d+(_+\d+)*/,
      octaldigits: /[0-7]+(_+[0-7]+)*/,
      binarydigits: /[0-1]+(_+[0-1]+)*/,
      hexdigits: /[[0-9a-fA-F]+(_+[0-9a-fA-F]+)*/,
      regexpctl: /[(){}\[\]\$\^|\-*+?\.]/,
      regexpesc: /\\(?:[bBdDfnrstvwWn0\\\/]|@regexpctl|c[A-Z]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4})/,
      tokenizer: {
        root: [[/[{}]/, "delimiter.bracket"], { include: "common" }],
        common: [
          [
            /[a-z_$][\w$]*/,
            {
              cases: {
                "@functions": "function",
                "@objects": "object",
                "@keywords": "keyword",
                "@default": "identifier"
              }
            }
          ],
          [
            /[A-Z][\w\$]*/,
            {
              cases: {
                "@functions": "function",
                "@objects": "object",
                "@keywords": "keyword",
                "@default": "type.identifier"
              }
            }
          ],
          { include: "@whitespace" },
          [
            /\/(?=([^\\\/]|\\.)+\/([dgimsuy]*)(\s*)(\.|;|,|\)|\]|\}|$))/,
            { token: "regexp", bracket: "@open", next: "@regexp" }
          ],
          [/[()\[\]]/, "@brackets"],
          [/[<>](?!@symbols)/, "@brackets"],
          [/!(?=([^=]|$))/, "delimiter"],
          [
            /@symbols/,
            {
              cases: {
                "@operators": "delimiter",
                "@default": ""
              }
            }
          ],
          [/(@digits)[eE]([\-+]?(@digits))?/, "number.float"],
          [/(@digits)\.(@digits)([eE][\-+]?(@digits))?/, "number.float"],
          [/0[xX](@hexdigits)n?/, "number.hex"],
          [/0[oO]?(@octaldigits)n?/, "number.octal"],
          [/0[bB](@binarydigits)n?/, "number.binary"],
          [/(@digits)n?/, "number"],
          [/[;,.]/, "delimiter"],
          [/"([^"\\]|\\.)*$/, "string.invalid"],
          [/'([^'\\]|\\.)*$/, "string.invalid"],
          [/"/, "string", "@string_double"],
          [/'/, "string", "@string_single"],
          [/`/, "string", "@string_backtick"]
        ],
        whitespace: [
          [/[ \t\r\n]+/, ""],
          [/\/\*\*(?!\/)/, "comment.doc", "@jsdoc"],
          [/\/\*/, "comment", "@comment"],
          [/\/\/.*$/, "comment"]
        ],
        comment: [
          [/[^\/*]+/, "comment"],
          [/\*\//, "comment", "@pop"],
          [/[\/*]/, "comment"]
        ],
        jsdoc: [
          [/[^\/*]+/, "comment.doc"],
          [/\*\//, "comment.doc", "@pop"],
          [/[\/*]/, "comment.doc"]
        ],
        regexp: [
          [
            /(\{)(\d+(?:,\d*)?)(\})/,
            ["regexp.escape.control", "regexp.escape.control", "regexp.escape.control"]
          ],
          [
            /(\[)(\^?)(?=(?:[^\]\\\/]|\\.)+)/,
            ["regexp.escape.control", { token: "regexp.escape.control", next: "@regexrange" }]
          ],
          [/(\()(\?:|\?=|\?!)/, ["regexp.escape.control", "regexp.escape.control"]],
          [/[()]/, "regexp.escape.control"],
          [/@regexpctl/, "regexp.escape.control"],
          [/[^\\\/]/, "regexp"],
          [/@regexpesc/, "regexp.escape"],
          [/\\\./, "regexp.invalid"],
          [/(\/)([dgimsuy]*)/, [{ token: "regexp", bracket: "@close", next: "@pop" }, "keyword.other"]]
        ],
        regexrange: [
          [/-/, "regexp.escape.control"],
          [/\^/, "regexp.invalid"],
          [/@regexpesc/, "regexp.escape"],
          [/[^\]]/, "regexp"],
          [
            /\]/,
            {
              token: "regexp.escape.control",
              next: "@pop",
              bracket: "@close"
            }
          ]
        ],
        string_double: [
          [/[^\\"]+/, "string"],
          [/@escapes/, "string.escape"],
          [/\\./, "string.escape.invalid"],
          [/"/, "string", "@pop"]
        ],
        string_single: [
          [/[^\\']+/, "string"],
          [/@escapes/, "string.escape"],
          [/\\./, "string.escape.invalid"],
          [/'/, "string", "@pop"]
        ],
        string_backtick: [
          [/\$\{/, { token: "delimiter.bracket", next: "@bracketCounting" }],
          [/[^\\`$]+/, "string"],
          [/@escapes/, "string.escape"],
          [/\\./, "string.escape.invalid"],
          [/`/, "string", "@pop"]
        ],
        bracketCounting: [
          [/\{/, "delimiter.bracket", "@bracketCounting"],
          [/\}/, "delimiter.bracket", "@pop"],
          { include: "common" }
        ]
      }
};